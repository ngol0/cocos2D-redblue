{"version":3,"sources":["file:///Users/lamngo/Desktop/Git/cocos2D-redblue/assets/Script/BombIcon.ts"],"names":["_decorator","Prefab","Collider2D","Contact2DType","instantiate","find","Vec3","Explosion","PoolObjects","ccclass","property","BombIcon","type","start","collider","getComponent","on","BEGIN_CONTACT","onBeginContact","selfCollider","otherCollider","contact","tag","initBombSprite","initExplosionVFX","Instace","SetActiveDamage","_isHit","bombObject","bombSprites","rootNode","parent","position","explosionVFX","update","deltaTime","Moving","BackToPool"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACSA,MAAAA,U,OAAAA,U;AAA6BC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,U,OAAAA,U;AAAYC,MAAAA,a,OAAAA,a;AAAkCC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,I,OAAAA,I;;AACtGC,MAAAA,S,iBAAAA,S;;AACAC,MAAAA,W,iBAAAA,W;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBV,U;;0BAGjBW,Q,WADZF,OAAO,CAAC,UAAD,C,UAGHC,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEX;AAAR,OAAD,C,UAGRS,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEX;AAAR,OAAD,C,oCANb,MACaU,QADb;AAAA;AAAA,sCAC0C;AAAA;AAAA;;AAAA;;AAAA;;AAAA,+CAQR,KARQ;;AAAA,gDAUjB,IAAIL,IAAJ,EAViB;;AAAA,8CAYnB,IAZmB;AAAA;;AActCO,QAAAA,KAAK,GAAG;AACJ;AACA,cAAIC,QAAQ,GAAG,KAAKC,YAAL,CAAkBb,UAAlB,CAAf;;AACA,cAAIY,QAAJ,EAAc;AACVA,YAAAA,QAAQ,CAACE,EAAT,CAAYb,aAAa,CAACc,aAA1B,EAAyC,KAAKC,cAA9C,EAA8D,IAA9D;AACH;AACJ;;AAEDA,QAAAA,cAAc,CAACC,YAAD,EAA2BC,aAA3B,EAAsDC,OAAtD,EAAyF;AACnG,cAAID,aAAa,CAACE,GAAd,IAAqB,CAAzB,EAA4B;AACxB;AACA,iBAAKC,cAAL;AACA,iBAAKC,gBAAL;AAEA;AAAA;AAAA,wCAAUC,OAAV,CAAkBC,eAAlB;AAEA,iBAAKC,MAAL,GAAc,IAAd;AACH,WARD,MASK,IAAIP,aAAa,CAACE,GAAd,IAAqB,CAAzB,EAA4B;AAC7B,iBAAKK,MAAL,GAAc,IAAd;AACH;AACJ;;AAEOJ,QAAAA,cAAc,GAAG;AACrB,cAAIK,UAAU,GAAGxB,WAAW,CAAC,KAAKyB,WAAN,CAA5B;AACA,cAAIC,QAAQ,GAAGzB,IAAI,CAAC,QAAD,CAAnB;AACAuB,UAAAA,UAAU,CAACG,MAAX,GAAoBD,QAApB;AACAF,UAAAA,UAAU,CAACI,QAAX,GAAsB,IAAI1B,IAAJ,CAAS,CAAC,EAAV,EAAc,CAAC,GAAf,EAAoB,CAApB,CAAtB;AACH;;AAEOkB,QAAAA,gBAAgB,GAAG;AACvB,cAAIS,YAAY,GAAG7B,WAAW,CAAC,KAAK6B,YAAN,CAA9B;AACA,cAAIH,QAAQ,GAAGzB,IAAI,CAAC,QAAD,CAAnB;AACA4B,UAAAA,YAAY,CAACF,MAAb,GAAsBD,QAAtB;AACAG,UAAAA,YAAY,CAACD,QAAb,GAAwB,IAAI1B,IAAJ,CAAS,CAAC,EAAV,EAAc,GAAd,EAAmB,CAAnB,CAAxB;AAEH;;AAED4B,QAAAA,MAAM,CAACC,SAAD,EAAY;AACd,eAAKC,MAAL,CAAYD,SAAZ;;AAEA,cAAI,KAAKR,MAAT,EAAiB;AACb,iBAAKU,UAAL;AACH;AACJ;;AA1DqC,O;;;;;iBAGF,I;;;;;;;iBAGC,I","sourcesContent":["\nimport { _decorator, Component, Node, Prefab, Collider2D, Contact2DType, IPhysics2DContact, instantiate, find, Vec3, DebugMode, RigidBody2D } from 'cc';\nimport { Explosion } from './Explosion';\nimport { PoolObjects } from './PoolObjects';\nconst { ccclass, property } = _decorator;\n\n@ccclass('BombIcon')\nexport class BombIcon extends PoolObjects {\n\n    @property({ type: Prefab })\n    public bombSprites: Prefab | null = null;\n\n    @property({ type: Prefab })\n    public explosionVFX: Prefab | null = null;\n\n    public isExploding: boolean = false;\n\n    curPosOfBomb: Vec3 = new Vec3();\n\n    bombObject: Node = null;\n\n    start() {\n        //collider\n        let collider = this.getComponent(Collider2D);\n        if (collider) {\n            collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\n        }\n    }\n\n    onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\n        if (otherCollider.tag == 5) {\n            //spawn bomb\n            this.initBombSprite();\n            this.initExplosionVFX();\n\n            Explosion.Instace.SetActiveDamage();\n\n            this._isHit = true;\n        }\n        else if (otherCollider.tag == 4) {\n            this._isHit = true;\n        }\n    }\n\n    private initBombSprite() {\n        let bombObject = instantiate(this.bombSprites);\n        var rootNode = find(\"Canvas\");\n        bombObject.parent = rootNode;\n        bombObject.position = new Vec3(-50, -390, 0);\n    }\n\n    private initExplosionVFX() {\n        let explosionVFX = instantiate(this.explosionVFX);\n        var rootNode = find(\"Canvas\");\n        explosionVFX.parent = rootNode;\n        explosionVFX.position = new Vec3(-50, 400, 0);\n\n    }\n\n    update(deltaTime) {\n        this.Moving(deltaTime);\n\n        if (this._isHit) {\n            this.BackToPool();\n        }\n    }\n}\n"]}