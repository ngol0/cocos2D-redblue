{"version":3,"sources":["file:///Users/lamngo/Desktop/Cocos/RedandBlue_edited/assets/Script/Player.ts"],"names":["_decorator","Component","Vec3","Contact2DType","Collider2D","director","Sprite","Color","ccclass","property","Player","start","collider","getComponent","on","BEGIN_CONTACT","onBeginContact","myColor","node","getChildByName","color","console","log","toHEX","selfCollider","otherCollider","contact","name","shieldActive","loadScene","update","deltaTime","startToMove","curMoveTime","moveTime","position","targetPos","setRotationFromEuler","angle","MoveEnd","currentPos","x","moveSpeed","moveDirection","newRotation","eulerAngles","z","rotateSpeed","gridEndRight","gridEndLeft","isMoving","Move","direction","y","add","step","SetActiveShield","SetNonActiveShield","SetFasterSpeed","SettNormalSpeed","ChangeColor","RED"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, EditBoxComponent, Vec3, debug, Contact2DType, Collider2D, IPhysics2DContact, BoxCollider2D, CircleCollider2D, director, tween, v2, v3, instantiate, Prefab, Sprite, Color } from 'cc';\nconst { ccclass, property } = _decorator;\n \n@ccclass('Player')\nexport class Player extends Component {\n    //position var\n    private moveDirection: number;\n    private isMoving: boolean;\n    private startToMove: boolean;\n    private currentPos: Vec3;\n    private step = 100; //one block\n    private targetPos: Vec3 = new Vec3();\n    private curMoveTime: number = 0;\n    private moveTime: number = 0.2;\n    private moveSpeed: number = 400;\n\n    // //rotation var\n    private angle: number = 0;\n    private rotateSpeed: number = 300;\n\n    //grid stats\n    private gridEndLeft: number = -350;\n    private gridEndRight: number = 350;\n\n    //FOR SHIELD\n    public shieldActive: boolean = false;\n\n    //color\n    private myColor: Color;\n    \n\n    //--Collision with enenmy--//\n    start () {\n        let collider = this.getComponent(Collider2D);\n        if (collider) {\n            collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\n        }\n\n        this.myColor = this.node.getChildByName(\"Inside\").getComponent(Sprite).color;\n        console.log(this.myColor.toHEX(\"#rrggbb\"));\n    }\n\n    onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) \n    {\n        if (otherCollider.node.name == \"RedObstacles\" || otherCollider.node.name == \"StoneObstacles\")\n        {\n            // //when shield is inactive\n            if (!this.shieldActive)\n            {\n                director.loadScene('scene');\n            }  \n        }\n    }\n\n    //--PLAYER'S MOVEMENT--//\n    //tweening\n    update (deltaTime: number) \n    {\n        if (this.startToMove)\n        {\n            this.curMoveTime += deltaTime;\n            if (this.curMoveTime > this.moveTime)\n            {\n                //end\n                this.node.position = this.targetPos;\n                this.node.setRotationFromEuler(new Vec3(0, 0, this.angle + 90));\n                //console.log(this.node.eulerAngles);\n                this.startToMove = false;\n                this.MoveEnd();\n            }\n            else //tween and rotate\n            {\n                //tween\n                this.currentPos.x += this.moveSpeed * deltaTime * this.moveDirection;           \n                this.node.position = this.currentPos;\n\n                //rotate\n                let newRotation = this.node.eulerAngles.z + this.rotateSpeed * -this.moveDirection * deltaTime;\n                this.node.eulerAngles = new Vec3(0, 0, newRotation);\n\n                //check to see if the player is still in grid\n                if (this.currentPos.x > this.gridEndRight || this.currentPos.x < this.gridEndLeft)\n                {\n                    console.log('game over');\n                    director.loadScene('scene');\n                }\n            }\n        }        \n    }\n\n    //make sure that next move only starts when prev move finishes\n    MoveEnd()\n    {\n        this.isMoving = false;\n        this.node.setRotationFromEuler(new Vec3(0, 0, 0));\n    }\n\n    //move left or right\n    Move(direction: number)\n    {               \n        if (this.isMoving) { return; }\n\n        //left -1 right 1\n        this.moveDirection = direction;\n\n        //set current move time\n        this.curMoveTime = 0;\n\n        //set target position\n        this.currentPos = new Vec3 (this.node.position.x, this.node.position.y, this.node.position.z);\n        Vec3.add(this.targetPos, this.currentPos, new Vec3(this.step * direction, 0, 0));\n\n        //targetAngle\n        this.angle = this.node.eulerAngles.z;\n\n        this.startToMove = true;\n        this.isMoving = true;\n    }\n\n    //--FOR SHIELD--//\n    SetActiveShield()\n    {\n        this.shieldActive = true;\n    }\n\n    SetNonActiveShield()\n    {\n        this.shieldActive = false;\n    }\n\n    //--FOR SPEED--//\n    SetFasterSpeed()\n    {\n        this.moveTime = 0.1;\n\n    }\n\n    SettNormalSpeed()\n    {\n        this.moveTime = 0.2;\n    }\n\n    //--CHANGE COLOR--//\n    ChangeColor()\n    {       \n        this.myColor = Color.RED;\n        console.log(this.myColor.toHEX(\"#rrggbb\")) ;\n\n        //this.node.getChildByName(\"Inside\").color = Color.RED;\n        // console.log(this.node.getChildByName(\"Inside\").color.toHEX(\"#rrggbb\"));\n        // this.node.getChildByName(\"Inside\").color = new Color(255, 255, 255);\n    }\n}"]}