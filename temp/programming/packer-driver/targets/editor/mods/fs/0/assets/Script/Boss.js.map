{"version":3,"sources":["file:///Users/lamngo/Desktop/ATHENA/red-and-blue/assets/Script/Boss.ts"],"names":["_decorator","Component","Vec3","Collider2D","Contact2DType","ProgressBar","GameManager","PoolManager","Spawner","ccclass","property","Boss","type","start","curPos","node","position","x","y","z","collider","getComponent","on","BEGIN_CONTACT","onBeginContact","selfCollider","otherCollider","contact","name","ProcessHit","update","deltaTime","Move","Shoot","shoot","curTimeToShoot","timeToShoot","Instance","CreateBossBullet","moveDown","speed","bossPosY","timerBar","active","moveUp","bossStartingPoint","SetNonActiveBoss","progress","health","moveLeft","bossPosLeft","moveRight","bossPosRight","SetActiveBoss","scheduleOnce","console","log","AddScore"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, Vec3, Collider2D, Contact2DType, IPhysics2DContact, find, Prefab, instantiate, Pool, ProgressBar } from 'cc';\nimport { GameManager } from './GameManager';\nimport { PoolManager } from './PoolManager';\nimport { Spawner } from './Spawner';\nconst { ccclass, property } = _decorator;\n\n\n@ccclass('Boss')\nexport class Boss extends Component {\n\n    //Moving\n    private curPos: Vec3;\n    private speed: number = 500;\n\n    private moveDown: boolean = true;\n    private moveUp: boolean = false;\n    private moveLeft: boolean = true;\n    private moveRight: boolean = false;\n\n    private bossPosY: number = 500;\n    private bossPosLeft: number = -250;\n    private bossPosRight: number = 250;\n    private bossStartingPoint: number = 750;\n\n    // //Health\n    private health: number = 20;\n\n    @property({ type: ProgressBar })\n    public timerBar: ProgressBar;\n\n    //Shooting\n    public shoot: boolean = false;\n    private timeToShoot: number = 2;\n    private curTimeToShoot: number = 0;\n\n    start() {\n        this.curPos = new Vec3(this.node.position.x, this.node.position.y, this.node.position.z);\n\n        //collider\n        let collider = this.getComponent(Collider2D);\n        if (collider) {\n            collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\n        }\n    }\n\n    //when enemy collides with bullets\n    onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\n        if (otherCollider.node.name == \"Bullet\") {\n            this.ProcessHit();\n        }\n    }\n\n    update(deltaTime) {\n        this.Move(deltaTime);\n        this.Shoot(deltaTime);\n    }\n\n    private Shoot(deltaTime: number) {\n        if (this.shoot) {\n            this.curTimeToShoot += deltaTime;\n            if (this.curTimeToShoot >= this.timeToShoot) {\n                PoolManager.Instance.CreateBossBullet();\n                this.curTimeToShoot = 0;\n            }\n        }\n    }\n\n    private Move(deltaTime: number) {\n        if (this.moveDown) {\n            this.curPos.y -= deltaTime * this.speed;\n            if (this.node.position.y <= this.bossPosY) {\n                this.moveDown = false;\n                PoolManager.Instance.CreateBossBullet();\n                this.timerBar.node.active = true;\n                this.shoot = true;\n            }\n            this.node.position = this.curPos;\n        }\n\n        if (this.moveUp) {\n            this.curPos.y += deltaTime * this.speed;\n            if (this.node.position.y >= this.bossStartingPoint) {\n                this.moveUp = false;\n                //this.moveDown = true;\n                Spawner.Instance.SetNonActiveBoss();\n                this.SetNonActiveBoss();\n                this.timerBar.progress = 1;\n                this.health = 20;\n            }\n        }\n\n        if (this.moveLeft) {\n            this.curPos.x -= deltaTime * this.speed;\n            if (this.node.position.x <= this.bossPosLeft) {\n                this.moveLeft = false;\n                this.moveRight = true;\n            }\n            this.node.position = this.curPos;\n        }\n\n        if (this.moveRight) {\n            this.curPos.x += deltaTime * this.speed;\n            if (this.node.position.x >= this.bossPosRight) {\n                this.moveLeft = true;\n                this.moveRight = false;\n            }\n            this.node.position = this.curPos;\n        }\n    }\n\n    SetActiveBoss() {\n        this.scheduleOnce(function () {\n            this.node.active = true;\n            this.moveDown = true;\n            this.moveLeft = true;\n        }, 10);\n    }\n\n    SetNonActiveBoss() {\n        this.node.active = false;\n        this.moveDown = false;\n        this.moveLeft = false;\n    }\n\n    ProcessHit() {\n        this.health -= 10;\n        this.timerBar.progress = this.timerBar.progress - 0.5;\n        console.log(this.health);\n\n        if (this.health <= 0) {\n            GameManager.Instance.AddScore(100);\n            this.moveUp = true;\n            this.shoot = false;\n            this.timerBar.node.active = false;\n        }\n    }\n}\n\n"]}