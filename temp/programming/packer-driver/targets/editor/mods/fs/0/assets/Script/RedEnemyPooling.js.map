{"version":3,"sources":["file:///Users/lamngo/Desktop/Cocos/RedandBlue_1/assets/Script/RedEnemyPooling.ts"],"names":["_decorator","Component","instantiate","NodePool","Prefab","ccclass","property","RedEnemyPooling","type","onLoad","redEnemyPool","i","amountToPool","enemy","redEnemyPrefab","put","createEnemy","parentNode","size","get","parent","start","Instance"],"mappings":";;;;;;;;;;;;;;;;AACSA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,Q,OAAAA,Q;AAAUC,MAAAA,M,OAAAA,M;;;;;;;OAEvD;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBN,U;;iCAGjBO,e,WADZF,OAAO,CAAC,iBAAD,C,UAKHC,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAEJ;AAAP,OAAD,C,8CALb,MACaG,eADb,SACqCN,SADrC,CAC+C;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAU3C;AACAQ,QAAAA,MAAM,GAAG;AACL,eAAKC,YAAL,GAAoB,IAAIP,QAAJ,EAApB;;AACA,eAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,YAAzB,EAAuCD,CAAC,EAAxC,EACA;AACI,gBAAIE,KAAK,GAAGX,WAAW,CAAC,KAAKY,cAAN,CAAvB;AACA,iBAAKJ,YAAL,CAAkBK,GAAlB,CAAsBF,KAAtB;AACH;AACJ,SAlB0C,CAoB3C;;;AACAG,QAAAA,WAAW,CAACC,UAAD,EACX;AACI,cAAIJ,KAAK,GAAG,IAAZ;;AACA,cAAI,KAAKH,YAAL,CAAkBQ,IAAlB,KAA2B,CAA/B,EAAkC;AAClC;AACIL,cAAAA,KAAK,GAAG,KAAKH,YAAL,CAAkBS,GAAlB,EAAR;AACH,aAHD,MAIK;AACL;AACIN,cAAAA,KAAK,GAAGX,WAAW,CAAC,KAAKY,cAAN,CAAnB;AACH;;AACDD,UAAAA,KAAK,CAACO,MAAN,GAAeH,UAAf,CAVJ,CAU+B;AAC3B;AACH,SAlC0C,CAoC3C;AACA;AACA;AACA;AACA;AAEA;;;AACAI,QAAAA,KAAK,GAAI;AACLd,UAAAA,eAAe,CAACe,QAAhB,GAA2B,IAA3B;AACH;;AA7C0C,O,uCACD,I;;;;;iBAIL,I;;uFAEpChB,Q;;;;;iBAC6B,E","sourcesContent":["\nimport { _decorator, Component, Node, instantiate, NodePool, Prefab, Vec3 } from 'cc';\nimport { Enemy } from './Enemy';\nconst { ccclass, property } = _decorator;\n \n@ccclass('RedEnemyPooling')\nexport class RedEnemyPooling extends Component {\n    public static Instance: RedEnemyPooling = null;\n    public redEnemyPool: NodePool;\n\n    @property({type: Prefab})\n    public redEnemyPrefab: Prefab|null = null;\n\n    @property\n    public amountToPool: number = 10;\n\n    //create a pool\n    onLoad() {\n        this.redEnemyPool = new NodePool();\n        for (let i = 0; i < this.amountToPool; i++)\n        {\n            let enemy = instantiate(this.redEnemyPrefab);\n            this.redEnemyPool.put(enemy);\n        }\n    }\n\n    //create enemy from pool\n    createEnemy(parentNode: Node) \n    {\n        let enemy = null;\n        if (this.redEnemyPool.size() > 0) // use size method to check if there're nodes available in the pool\n        {\n            enemy = this.redEnemyPool.get();\n        }\n        else // if not enough node in the pool, we call instantiate to create node\n        {            \n            enemy = instantiate(this.redEnemyPrefab);\n        }\n        enemy.parent = parentNode; //add enemy node to the node tree\n        //enemy.getComponent(Enemy).init(); //initialize enemy\n    }\n\n    // //when enemy is out of screen, return it back to the pool\n    // onEnemyOut(enemy)\n    // {\n    //     this.redEnemyPool.put(enemy);\n    // }\n\n    //singleton\n    start () {\n        RedEnemyPooling.Instance = this;\n    }\n}\n"]}