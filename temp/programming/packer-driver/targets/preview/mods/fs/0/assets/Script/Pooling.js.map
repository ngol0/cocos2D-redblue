{"version":3,"sources":["file:///Users/lamngo/Desktop/Cocos/RedandBlue_1/assets/Script/Pooling.ts"],"names":["_decorator","Component","Prefab","NodePool","instantiate","ccclass","property","Pooling","type","onLoad","redEnemyPool","i","amountToPool","enemy","redEnemyPrefab","put","createEnemy","parentNode","size","get","parent","start","Instance"],"mappings":";;;;;;;;;;;;;;;;AACSA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,Q,OAAAA,Q;AAAUC,MAAAA,W,OAAAA,W;;;;;;;OAElD;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBN,U;;yBAGjBO,O,WADZF,OAAO,CAAC,SAAD,C,UAMHC,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAEN;AAAP,OAAD,C,8CANb,MACaK,OADb,SAC6BN,SAD7B,CACuC;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAWnC;AAEA;AACAQ,QAAAA,MAAM,GAAG;AAEL,eAAKC,YAAL,GAAoB,IAAIP,QAAJ,EAApB;;AACA,eAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,YAAzB,EAAuCD,CAAC,EAAxC,EACA;AACI,gBAAIE,KAAK,GAAGT,WAAW,CAAC,KAAKU,cAAN,CAAvB;AACA,iBAAKJ,YAAL,CAAkBK,GAAlB,CAAsBF,KAAtB;AACH;AACJ,SAtBkC,CAwBnC;;;AACAG,QAAAA,WAAW,CAACC,UAAD,EACX;AACI,cAAIJ,KAAK,GAAG,IAAZ;;AACA,cAAI,KAAKH,YAAL,CAAkBQ,IAAlB,KAA2B,CAA/B,EAAkC;AAClC;AACIL,cAAAA,KAAK,GAAG,KAAKH,YAAL,CAAkBS,GAAlB,EAAR;AACH,aAHD,MAIK;AACL;AACIN,cAAAA,KAAK,GAAGT,WAAW,CAAC,KAAKU,cAAN,CAAnB;AACH;;AAEDD,UAAAA,KAAK,CAACO,MAAN,GAAeH,UAAf,CAXJ,CAW+B;AAC9B;;AAEDI,QAAAA,KAAK,GAAI;AACLd,UAAAA,OAAO,CAACe,QAAR,GAAmB,IAAnB;AACH,SA1CkC,CA4CnC;AACA;AACA;;;AA9CmC,O,uCAED,I;;;;;iBAIG,I;;uFAEpChB,Q;;;;;iBAC6B,E","sourcesContent":["\nimport { _decorator, Component, Node, Prefab, NodePool, instantiate } from 'cc';\nimport { Enemy } from './Enemy';\nconst { ccclass, property } = _decorator;\n \n@ccclass('Pooling')\nexport class Pooling extends Component {\n    \n    public static Instance: Pooling = null;\n    public redEnemyPool: NodePool;\n\n    @property({type: Prefab})\n    public redEnemyPrefab: Prefab|null = null;\n\n    @property\n    public amountToPool: number = 20;\n\n    //enemy: Node;\n\n    //create a pool\n    onLoad() {\n\n        this.redEnemyPool = new NodePool();\n        for (let i = 0; i < this.amountToPool; i++)\n        {\n            let enemy = instantiate(this.redEnemyPrefab);\n            this.redEnemyPool.put(enemy);\n        }\n    }\n\n    //create enemy from pool\n    createEnemy(parentNode: Node) \n    {\n        let enemy = null;\n        if (this.redEnemyPool.size() > 0) // use size method to check if there're nodes available in the pool\n        {\n            enemy = this.redEnemyPool.get();\n        }\n        else // if not enough node in the pool, we call cc.instantiate to create node\n        {\n            enemy = instantiate(this.redEnemyPrefab);\n        }\n\n        enemy.parent = parentNode; //add enemy node to the node tree\n    }\n\n    start () {\n        Pooling.Instance = this;\n    }\n\n    // update (deltaTime: number) {\n    //     // [4]\n    // }\n}\n\n"]}