{"version":3,"sources":["file:///Users/lamngo/Desktop/Git/cocos2D-redblue/assets/Script/Spawner.ts"],"names":["_decorator","Component","Node","Boss","PoolManager","ccclass","property","ItemType","Spawner","type","onLoad","Instance","_arrayOfPositionToSpawn","start","generateItemsByRow","_row","bossSpawning","push","BT_NONE","roll","Math","floor","random","BT_ICONS","BT_BOMBICONS","BT_ENEMY","i","rowLength","shuffle","spawnItems","j","length","item","spawnByItemType","node","addChild","setPosition","block","CreateEnemy","CreateIcons","BT_PLAYER","CreatePlayer","CreateBombIcons","array","currentIndex","randomIndex","update","deltaTime","_curSpawnTime","_timeBetweenSpawn","_count","_timeForBoss","_oneTime","bossNode","getComponent","SetActiveBoss","SetNonActiveBoss"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, instantiate, debug, Prefab, Vec3, find } from 'cc';\nimport { Boss } from './Boss';\nimport { PoolManager } from './PoolManager';\nconst { ccclass, property } = _decorator;\n\nenum ItemType {\n    BT_NONE, //0\n    BT_ENEMY, //1\n    BT_PLAYER, //2\n    BT_BOMBICONS, //3\n    BT_ICONS //4\n};\n\n@ccclass('Spawner')\nexport class Spawner extends Component {\n\n    //---FOR SPAWNING ENEMIES AND ICONS---//\n    public static Instance: Spawner = null;\n    private _timeBetweenSpawn: number = 1; //distance between spawning is 1 block\n    private _row: number[] = []; //grid to spawn\n    public rowLength: Number = 8; //number of grid to spawn\n    private _arrayOfPositionToSpawn: number[] = [];\n    private _curSpawnTime: number = 0; //to count down for 1 block between spawning\n\n    //--FOR BOSS--//\n    public bossSpawning: boolean = false;\n    private _oneTime: boolean = false;\n    private _count: number = 0;\n    private _timeForBoss: number = 5;\n\n    @property({ type: Node })\n    public bossNode: Node | null = null;\n\n    //--DEFAULT METHODS--//\n    onLoad() {\n        Spawner.Instance = this;\n        this._arrayOfPositionToSpawn = [-350, -250, -150, -50, 50, 150, 250, 350];\n    }\n\n    start() {\n        this.generateItemsByRow();\n    }\n\n    //---GENERATE ITEMS BY ROW---//\n    //generate only enemies\n    private generateItemsByRow() {\n\n        this._row = [];\n        if (!this.bossSpawning) { //if not spawning boss, generate enemies\n            this._row.push(ItemType.BT_NONE); //making sure array always have at least one 0\n\n            let roll = Math.floor(Math.random() * 6 + 1);\n\n            if (roll == 3 || roll == 5) //randomly choose a number - if it is 3 or 5 or 4, spawns an icon\n                this._row.push(ItemType.BT_ICONS);\n\n            else if (roll == 4)\n                this._row.push(ItemType.BT_BOMBICONS);\n\n            else if (roll == 1 || roll == 2 || roll == 6)\n                this._row.push(ItemType.BT_ENEMY);\n\n            for (let i = 2; i < this.rowLength; i++)\n                this._row.push(Math.floor(Math.random() * 3)); //0 to 2\n\n        }\n        else { //else, generate icons only\n            this._row.push(ItemType.BT_ICONS);\n\n            for (let i = 1; i < this.rowLength; i++)\n                this._row.push(ItemType.BT_NONE);\n\n        }\n        // for (let n = 0; n < this.rowLength; n++)\n        //     console.log(this._row[n]);\n\n        this.shuffle(this._row); //shuffle the contents of array\n        this.spawnItems();\n    }\n\n    private spawnItems() {\n        for (let j = 0; j < this._row.length; j++) {\n            let item: Node = this.spawnByItemType(this._row[j]); //spawning items\n            if (item) {\n                this.node.addChild(item);\n                item.setPosition(this._arrayOfPositionToSpawn[j], 760, 0);\n            }\n        }\n    }\n\n    spawnByItemType(type: ItemType) {\n\n        let block: Node | null = null;\n        switch (type) {\n            case ItemType.BT_ENEMY:\n                block = PoolManager.Instance.CreateEnemy();\n                break;\n            case ItemType.BT_ICONS:\n                block = PoolManager.Instance.CreateIcons();\n                break;\n            case ItemType.BT_PLAYER:\n                block = PoolManager.Instance.CreatePlayer();\n                break;\n            case ItemType.BT_BOMBICONS:\n                block = PoolManager.Instance.CreateBombIcons();\n                break;\n        }\n\n        return block;\n    }\n\n    shuffle(array) {\n        let currentIndex = array.length, randomIndex;\n\n        // While there remain elements to shuffle.\n        while (currentIndex != 0) {\n\n            // Pick a remaining element.\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex--;\n\n            // And swap it with the current element.\n            [array[currentIndex], array[randomIndex]] = [\n                array[randomIndex], array[currentIndex]];\n        }\n\n        return array;\n    }\n\n    ///---UPDATE---//\n    update(deltaTime: number) {\n\n        this._curSpawnTime += deltaTime;\n        if (this._curSpawnTime >= this._timeBetweenSpawn) {\n            this.generateItemsByRow();\n            this._curSpawnTime = 0;\n            this._count++;\n        }\n\n        if (this._count > this._timeForBoss) {\n            this.bossSpawning = true;\n            if (!this._oneTime) {\n                this.bossNode.getComponent(Boss).SetActiveBoss();\n                this._oneTime = true;\n            }\n        }\n    }\n\n    //---BOSS METHODS---//\n    SetNonActiveBoss() {\n        this.bossSpawning = false;\n        this._count = 0;\n        this._oneTime = false;\n    }\n}\n"]}