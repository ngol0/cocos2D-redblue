{"version":3,"sources":["file:///Users/lamngo/Desktop/ATHENA/red-and-blue/assets/Script/HorizontalMovement.ts"],"names":["_decorator","Component","Vec3","director","ccclass","property","HorizontalMovement","start","Instance","update","deltaTime","Moving","_startToMove","_curMoveTime","_moveTime","node","position","_targetPos","setRotationFromEuler","_angle","MoveEnd","_curPos","x","_moveSpeed","_moveDirection","newRotation","eulerAngles","z","_rotateSpeed","_gridEndRight","_gridEndLeft","console","log","loadScene","_isMoving","InputForMove","direction","y","add","_step"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, Vec3, director } from 'cc';\nconst { ccclass, property } = _decorator;\n \n@ccclass('HorizontalMovement')\nexport class HorizontalMovement extends Component {\n\n    public static Instance: HorizontalMovement = null;\n\n    //position var\n    private _moveDirection: number;\n    private _isMoving: boolean;\n    private _startToMove: boolean;\n    private _curPos: Vec3;\n    private _step = 100; //one block\n    private _targetPos: Vec3 = new Vec3();\n    private _curMoveTime: number = 0;\n    private _moveTime: number = 0.2;\n    private _moveSpeed: number = 400;\n\n    // //rotation var\n    private _angle: number = 0;\n    private _rotateSpeed: number = 400;\n\n    //grid stats\n    private _gridEndLeft: number = -350;\n    private _gridEndRight: number = 350;\n\n    start()\n    {\n        HorizontalMovement.Instance = this;\n    }\n\n    ///--PLAYER'S MOVEMENT--//\n     //tweening\n     update (deltaTime: number) \n     {\n         this.Moving(deltaTime);        \n     }\n \n    public Moving(deltaTime: number) {\n        if (this._startToMove) {\n            this._curMoveTime += deltaTime;\n            if (this._curMoveTime > this._moveTime) {\n                //end\n                this.node.position = this._targetPos;\n                this.node.setRotationFromEuler(new Vec3(0, 0, this._angle + 90));\n                //console.log(this.node.eulerAngles);\n                this._startToMove = false;\n                this.MoveEnd();\n            }\n            else //tween and rotate\n            {\n                //tween\n                this._curPos.x += this._moveSpeed * deltaTime * this._moveDirection;\n                this.node.position = this._curPos;\n\n                //rotate\n                let newRotation = this.node.eulerAngles.z + this._rotateSpeed * -this._moveDirection * deltaTime;\n                this.node.eulerAngles = new Vec3(0, 0, newRotation);\n\n                //check to see if the player is still in grid\n                if (this._curPos.x > this._gridEndRight || this._curPos.x < this._gridEndLeft) {\n                    console.log('game over');\n                    director.loadScene('scene');\n                }\n            }\n        }\n    }\n\n     //make sure that next move only starts when prev move finishes\n     MoveEnd()\n     {\n         this._isMoving = false;\n         this.node.setRotationFromEuler(new Vec3(0, 0, 0));\n     }\n \n     //move left or right\n     InputForMove(direction: number)\n     {               \n         if (this._isMoving) { return; }\n \n         //left -1 right 1\n         this._moveDirection = direction;\n \n         //set current move time\n         this._curMoveTime = 0;\n \n         //set target position\n         this._curPos = new Vec3 (this.node.position.x, this.node.position.y, this.node.position.z);\n         Vec3.add(this._targetPos, this._curPos, new Vec3(this._step * direction, 0, 0));\n \n         //targetAngle\n         this._angle = this.node.eulerAngles.z;\n \n         this._startToMove = true;\n         this._isMoving = true;\n     }\n    // }\n}\n"]}