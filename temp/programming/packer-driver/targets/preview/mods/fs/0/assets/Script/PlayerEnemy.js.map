{"version":3,"sources":["file:///Users/lamngo/Desktop/ATHENA/red-and-blue/assets/Script/PlayerEnemy.ts"],"names":["_decorator","Collider2D","Contact2DType","PoolObjects","ccclass","property","PlayerEnemy","start","collider","getComponent","on","BEGIN_CONTACT","onBeginContact","selfCollider","otherCollider","contact","tag","node","name","_isHit","update","deltaTime","Moving","BackToPool"],"mappings":";;;;;;;;;;;;;;AACSA,MAAAA,U,OAAAA,U;AAA6BC,MAAAA,U,OAAAA,U;AAA+BC,MAAAA,a,OAAAA,a;;AAC5DC,MAAAA,W,iBAAAA,W;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;6BAIjBM,W,WADZF,OAAO,CAAC,aAAD,C,gBAAR,MACaE,WADb;AAAA;AAAA,sCAC6C;AAEzCC,QAAAA,KAAK,GAAI;AACL;AACA,cAAIC,QAAQ,GAAG,KAAKC,YAAL,CAAkBR,UAAlB,CAAf;;AACA,cAAIO,QAAJ,EAAc;AACVA,YAAAA,QAAQ,CAACE,EAAT,CAAYR,aAAa,CAACS,aAA1B,EAAyC,KAAKC,cAA9C,EAA8D,IAA9D;AACH;AACJ;;AAEDA,QAAAA,cAAc,CAACC,YAAD,EAA2BC,aAA3B,EAAsDC,OAAtD,EACd;AACI,cAAID,aAAa,CAACE,GAAd,IAAqB,CAArB,IAA0BF,aAAa,CAACG,IAAd,CAAmBC,IAAnB,IAA2B,QAArD,IAAiEJ,aAAa,CAACG,IAAd,CAAmBC,IAAnB,IAA2B,YAA5F,IAA4GJ,aAAa,CAACG,IAAd,CAAmBC,IAAnB,IAA2B,MAA3I,EACA;AACI;AACA,iBAAKC,MAAL,GAAc,IAAd;AACH;AACJ;;AAEDC,QAAAA,MAAM,CAAEC,SAAF,EAAqB;AAEvB,eAAKC,MAAL,CAAYD,SAAZ;AAEA,cAAI,KAAKF,MAAT,EACI;AACA;AACA,iBAAKI,UAAL;AACP;;AA3BwC,O","sourcesContent":["\nimport { _decorator, Component, Node, Collider2D, IPhysics2DContact, Contact2DType } from 'cc';\nimport { PoolObjects } from './PoolObjects';\nconst { ccclass, property } = _decorator;\n\n \n@ccclass('PlayerEnemy')\nexport class PlayerEnemy extends PoolObjects {\n\n    start () {\n        //collider\n        let collider = this.getComponent(Collider2D);\n        if (collider) {\n            collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\n        }\n    }\n\n    onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) \n    {\n        if (otherCollider.tag == 5 || otherCollider.node.name == \"Bullet\" || otherCollider.node.name == \"OutOfBound\" || otherCollider.node.name == \"Bomb\")\n        {\n            //kill enemy\n            this._isHit = true;\n        }\n    }\n\n    update (deltaTime: number) {\n\n        this.Moving(deltaTime);\n\n        if (this._isHit)\n            //if enemy node is out of bound/hit by bullet/hit by bomb/by player - return to pool \n            //and set the position back to 0,0,0\n            this.BackToPool();\n    }\n\n\n}\n\n"]}