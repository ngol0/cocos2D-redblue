{"version":3,"sources":["file:///Users/lamngo/Desktop/Git/cocos2D-redblue/assets/Script/PlayerController.ts"],"names":["_decorator","Component","Node","Vec3","Collider2D","Contact2DType","director","GameManager","ccclass","property","PlayerController","type","start","Instance","collider","getComponent","on","BEGIN_CONTACT","onBeginContact","selfCollider","otherCollider","contact","isBlue","node","name","shieldActive","loadScene","isRed","update","deltaTime","Moving","_startToMove","_curMoveTime","_moveTime","position","_targetPos","setRotationFromEuler","_angle","MoveEnd","_curPos","x","_moveSpeed","_moveDirection","newRotation","eulerAngles","z","_rotateSpeed","_gridEndRight","_gridEndLeft","console","log","_isMoving","InputForMove","direction","y","add","_step","SetActiveShield","shield","active","scheduleOnce","SetNonActiveShield","_iconActiveTime","SetFasterSpeed","fastSpeed","SettNormalSpeed"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, Vec3, Collider2D, Contact2DType, IPhysics2DContact, director, BoxCollider2D, Vec2, math } from 'cc';\nimport { GameManager } from './GameManager';\nconst { ccclass, property } = _decorator;\n\n\n@ccclass('PlayerController')\nexport class PlayerController extends Component {\n\n    public static Instance: PlayerController = null;\n\n    //position var\n    private _moveDirection: number;\n    private _isMoving: boolean;\n    private _startToMove: boolean;\n    private _curPos: Vec3;\n    private _step = 100; //one block\n    private _targetPos: Vec3 = new Vec3();\n    private _curMoveTime: number = 0;\n    private _moveTime: number = 0.19;\n    private _moveSpeed: number = 500;\n\n    // //rotation var\n    private _angle: number = 0;\n    private _rotateSpeed: number = 500;\n\n    //grid stats\n    private _gridEndLeft: number = -400;\n    private _gridEndRight: number = 400;\n\n    //FOR SHIELD\n    public shieldActive: boolean = false;\n\n    @property({ type: Node })\n    public shield: Node | null = null;\n\n    //FOR SPEED\n    public fastSpeed: boolean = false;\n\n    private _iconActiveTime: number = 8;\n\n\n    //--Collision with enenmy--//\n    start() {\n\n        PlayerController.Instance = this;\n\n        let collider = this.getComponent(Collider2D);\n        if (collider) {\n            collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\n        }\n\n    }\n\n    onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\n        if (GameManager.Instance.isBlue) {\n            if (otherCollider.node.name == \"RedObstacles\" || otherCollider.node.name == \"StoneObstacles\") {\n                // //when shield is inactive\n                if (!this.shieldActive) {\n                    director.loadScene('scene');\n                }\n            }\n        }\n        else if (GameManager.Instance.isRed) {\n            if (otherCollider.node.name == \"PlayerEnemy\" || otherCollider.node.name == \"StoneObstacles\") {\n                // //when shield is inactive\n                if (!this.shieldActive) {\n                    director.loadScene('scene');\n                }\n            }\n        }\n    }\n\n    //--PLAYER'S MOVEMENT--//\n    //tweening\n    update(deltaTime: number) {\n        this.Moving(deltaTime);\n\n    }\n\n    public Moving(deltaTime: number) {\n        if (this._startToMove) {\n            this._curMoveTime += deltaTime;\n            if (this._curMoveTime > this._moveTime) {\n                //end\n                this.node.position = this._targetPos;\n                this.node.setRotationFromEuler(new Vec3(0, 0, this._angle + 90));\n                this._startToMove = false;\n                this.MoveEnd();\n            }\n            else //tween and rotate\n            {\n                //tween\n                this._curPos.x += this._moveSpeed * deltaTime * this._moveDirection;\n                this.node.position = this._curPos;\n\n                //rotate\n                let newRotation = this.node.eulerAngles.z + this._rotateSpeed * -this._moveDirection * deltaTime;\n                this.node.eulerAngles = new Vec3(0, 0, newRotation);\n\n                //check to see if the player is still in grid\n                if (this._curPos.x > this._gridEndRight || this._curPos.x < this._gridEndLeft) {\n                    console.log('out grid');\n                    director.loadScene('scene');\n                }\n            }\n        }\n    }\n\n    //make sure that next move only starts when prev move finishes\n    MoveEnd() {\n        this._isMoving = false;\n        this.node.setRotationFromEuler(new Vec3(0, 0, 0));\n    }\n\n    //move left or right\n    InputForMove(direction: number) {\n        if (this._isMoving) { return; }\n\n        //left -1 right 1\n        this._moveDirection = direction;\n\n        //set current move time\n        this._curMoveTime = 0;\n\n        //set target position\n        this._curPos = new Vec3(this.node.position.x, this.node.position.y, this.node.position.z);\n        Vec3.add(this._targetPos, this._curPos, new Vec3(this._step * direction, 0, 0));\n\n        //targetAngle\n        this._angle = this.node.eulerAngles.z;\n\n        this._startToMove = true;\n        this._isMoving = true;\n    }\n\n    //  //--FOR SHIELD--//\n    SetActiveShield() {\n        this.shieldActive = true;\n        this.shield.active = true;\n\n        this.scheduleOnce(function () {\n\n            this.SetNonActiveShield();\n\n        }, this._iconActiveTime);\n    }\n\n    SetNonActiveShield() {\n        this.shieldActive = false;\n        this.shield.active = false;\n    }\n\n    //--FOR SPEED--//\n    SetFasterSpeed() {\n        this._moveTime = 0.16;\n        this._moveSpeed = 600;\n        this._rotateSpeed = 700;\n        this.fastSpeed = true;\n\n        this.scheduleOnce(function () {\n\n            this.SettNormalSpeed();\n\n        }, this._iconActiveTime);\n    }\n\n    SettNormalSpeed() {\n        this._moveTime = 0.19;\n        this._moveSpeed = 500;\n        this._rotateSpeed = 500;\n        this.fastSpeed = false;\n    }\n}\n\n"]}