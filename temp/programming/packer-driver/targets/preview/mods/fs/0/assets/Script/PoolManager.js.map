{"version":3,"sources":["file:///Users/lamngo/Desktop/ATHENA/red-and-blue/assets/Script/PoolManager.ts"],"names":["_decorator","Component","Node","instantiate","NodePool","Prefab","Vec3","find","BombIcon","BossBullet","Bullet","Enemy","Icons","ccclass","property","PoolManager","type","start","Instance","onLoad","enemyPool","i","amountOfEnemyToPool","redEnemy","redEnemyPrefab","stoneEnemy","stoneEnemyPrefab","_arrayOfEnemies","push","forEach","element","enemyComponent","getComponent","SetPool","put","bulletPool","k","amountOfBullet","bullet","bulletPrefab","bulletComponent","playerPool","n","amountOfPlayerEnim","player","playerPrefab","playerComponent","iconPool","gunicon","gunIcon","shieldicon","shieldIcon","speedicon","speedIcon","_arrayOfIconObjects","iconComponent","bombIconPool","bombicon","bombIcon","bombComponent","bossBulletPool","l","bossBullet","bossBulletPrefab","bossBulletComp","CreateEnemy","size","enemy","get","console","log","CreatePlayer","CreateIcons","icons","CreateBombIcons","CreateBullet","rootNode","parent","position","x","y","z","CreateBossBullet","boss"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, instantiate, NodePool, Prefab, Vec3, v3, Canvas, game, find } from 'cc';\nimport { BombIcon } from './BombIcon';\nimport { BossBullet } from './BossBullet';\nimport { Bullet } from './Bullet';\nimport { Enemy } from './Enemy';\nimport { Icons } from './Icons';\nconst { ccclass, property } = _decorator;\n\n@ccclass('PoolManager')\nexport class PoolManager extends Component {\n    public static Instance: PoolManager = null;\n\n    //pool variables\n    public enemyPool: NodePool;\n    public bulletPool: NodePool;\n    public bossBulletPool: NodePool;\n    public playerPool: NodePool;\n    public iconPool: NodePool;\n    public bombIconPool: NodePool;\n\n    //red enemy\n    @property({ type: Prefab })\n    public redEnemyPrefab: Prefab | null = null;\n\n    //stone enemy\n    @property({ type: Prefab })\n    public stoneEnemyPrefab: Prefab | null = null;\n\n    //player\n    @property({ type: Prefab })\n    public playerPrefab: Prefab | null = null;\n\n    //amount to pool all three objects above\n    @property\n    public amountOfPlayerEnim: number = 10;\n\n    @property\n    public amountOfEnemyToPool: number = 10;\n\n    //bullet\n    @property({ type: Prefab })\n    public bulletPrefab: Prefab | null = null;\n\n    @property({ type: Prefab })\n    public bossBulletPrefab: Prefab | null = null;\n\n    private _offSetforBullet: number = 50;\n\n    @property\n    public amountOfBullet: number = 3;\n\n    //cavas\n    canvas: Canvas;\n\n    //ICON\n    @property({ type: Prefab })\n    public gunIcon: Prefab | null = null;\n\n    @property({ type: Prefab })\n    public shieldIcon: Prefab | null = null;\n\n    @property({ type: Prefab })\n    public bombIcon: Prefab | null = null;\n\n    @property({ type: Prefab })\n    public speedIcon: Prefab | null = null;\n\n    private _arrayOfIconObjects: Node[] = [];\n    private _arrayOfEnemies: Node[] = [];\n\n    @property({ type: Node })\n    public player: Node | null = null;\n\n    @property({ type: Node })\n    public boss: Node | null = null;\n\n    //singleton\n    start() {\n        PoolManager.Instance = this;\n    }\n\n    //create a pool\n    onLoad() {\n        //create enemy pool that has both stone and different color enemy\n        this.enemyPool = new NodePool('Enemy');\n        for (let i = 0; i < this.amountOfEnemyToPool; i++) {\n            let redEnemy = instantiate(this.redEnemyPrefab);\n            let stoneEnemy = instantiate(this.stoneEnemyPrefab);\n\n            this._arrayOfEnemies.push(redEnemy, stoneEnemy);\n\n            this._arrayOfEnemies.forEach(element => {\n                let enemyComponent = element.getComponent(Enemy);\n                if (enemyComponent && enemyComponent.SetPool) {\n                    enemyComponent.SetPool(this.enemyPool);\n                }\n                this.enemyPool.put(element);\n            });\n        }\n\n\n        //create bullet pool\n        this.bulletPool = new NodePool('Bullet Pool');\n        for (let k = 0; k < this.amountOfBullet; k++) {\n            let bullet = instantiate(this.bulletPrefab);\n            let bulletComponent = bullet.getComponent(Bullet);\n            if (bulletComponent && bulletComponent.SetPool) {\n                bulletComponent.SetPool(this.bulletPool);\n            }\n            this.bulletPool.put(bullet);\n        }\n\n        //create player pool that has enemy same color as player\n        this.playerPool = new NodePool('Player Pool');\n        for (let n = 0; n < this.amountOfPlayerEnim; n++) {\n            let player = instantiate(this.playerPrefab);\n            let playerComponent = player.getComponent(Enemy);\n            if (playerComponent && playerComponent.SetPool) {\n                playerComponent.SetPool(this.playerPool);\n            }\n            this.playerPool.put(player);\n        }\n\n        //create icon pool that has 1 for each icon type\n        this.iconPool = new NodePool('Icon Pool');\n        let gunicon = instantiate(this.gunIcon);\n        let shieldicon = instantiate(this.shieldIcon);\n        let speedicon = instantiate(this.speedIcon);\n\n        this._arrayOfIconObjects.push(gunicon, shieldicon, speedicon);\n\n        this._arrayOfIconObjects.forEach(element => {\n            let iconComponent = element.getComponent(Icons);\n            if (iconComponent && iconComponent.SetPool) {\n                iconComponent.SetPool(this.iconPool);\n            }\n            this.iconPool.put(element);\n        });\n\n        this.bombIconPool = new NodePool('BombPool')\n        let bombicon = instantiate(this.bombIcon);\n        let bombComponent = bombicon.getComponent(BombIcon);\n        if (bombComponent && bombComponent.SetPool) {\n            bombComponent.SetPool(this.bombIconPool);\n        }\n        this.bombIconPool.put(bombicon);\n\n        this.bossBulletPool = new NodePool('Boss Bullet Pool')\n        for (let l = 0; l < this.amountOfBullet; l++) {\n            let bossBullet = instantiate(this.bossBulletPrefab);\n            let bossBulletComp = bossBullet.getComponent(BossBullet);\n            if (bossBulletComp && bossBulletComp.SetPool) {\n                bossBulletComp.SetPool(this.bossBulletPool);\n            }\n            this.bossBulletPool.put(bossBullet);\n        }\n    }\n\n    //create enemy from pool\n    CreateEnemy() {\n        if (this.enemyPool.size() > 0) // use size method to check if there're nodes available in the pool\n        {\n            var enemy = this.enemyPool.get();\n            //enemy.parent = parentNode;\n            //enemy.position = v3(0, 0, 0);\n        }\n        else {\n            //enemy = instantiate(this.redEnemyPrefab); // if not enough node in the pool, we call instantiate to create node\n            console.log('no more red enemy');\n        }\n        return enemy;\n    }\n\n    //create player\n    CreatePlayer() {\n        if (this.playerPool.size() > 0) // use size method to check if there're nodes available in the pool\n        {\n            var player = this.playerPool.get();\n        }\n        else {\n            console.log('no more player');\n        }\n\n        return player;\n    }\n\n    //create icons\n    CreateIcons() {\n        if (this.iconPool.size() > 0) // use size method to check if there're nodes available in the pool\n        {\n            var icons = this.iconPool.get();\n        }\n        else {\n            console.log('no more icons');\n        }\n        return icons;\n    }\n\n    CreateBombIcons() {\n        if (this.bombIconPool.size() > 0) // use size method to check if there're nodes available in the pool\n        {\n            var bombicon = this.bombIconPool.get();\n            console.log('bombicon');\n        }\n        else {\n            console.log('no more bomb icons');\n        }\n        return bombicon;\n    }\n\n    //create bullet\n    CreateBullet() {\n        if (this.bulletPool.size() > 0) // use size method to check if there're nodes available in the pool\n        {\n            var bullet = this.bulletPool.get();\n            var rootNode = find(\"Canvas\");\n            bullet.parent = rootNode;\n            bullet.position = new Vec3(this.player.position.x, this.player.position.y + 50, this.player.position.z);\n        }\n        else {\n            console.log('no more bullet');\n        }\n    }\n\n\n    CreateBossBullet() {\n        if (this.bossBulletPool.size() > 0) // use size method to check if there're nodes available in the pool\n        {\n            var bossBullet = this.bossBulletPool.get();\n            var rootNode = find(\"Canvas\");\n            bossBullet.parent = rootNode;\n            bossBullet.position = new Vec3(this.boss.position.x, this.boss.position.y - 50, this.boss.position.z);\n        }\n        else {\n            console.log('no more boss bullet');\n        }\n    }\n}\n"]}